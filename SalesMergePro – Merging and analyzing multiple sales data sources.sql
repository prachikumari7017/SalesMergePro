CREATE DATABASE SalesMergePro;
USE SalesMergePro;

CREATE TABLE sales_Table (	
    sale_id INT PRIMARY KEY,	
    sale_date DATE,	
    customer_id INT,	
    product_id INT,	
    quantity INT,	
    price_per_unit DECIMAL(10,2),	
    total_amount DECIMAL(10,2),	
    store_location VARCHAR(50)	
);	

INSERT INTO sales_Table VALUES					
(1, '2024-12-01', 101, 2001, 2, 500.00, 1000.00, 'New York'),					
(2, '2024-12-01', 102, 2002, 1, 1200.00, 1200.00, 'Chicago'),					
(3, '2024-12-02', 103, 2001, 3, 500.00, 1500.00, 'Los Angeles'),					
(4, '2024-12-03', 104, 2003, 5, 250.00, 1250.00, 'New York'),					
(5, '2024-12-04', 105, 2002, 2, 1200.00, 2400.00, 'Chicago'),					
(6, '2024-12-05', 101, 2003, 4, 250.00, 1000.00, 'Los Angeles'),					
(7, '2024-12-05', 106, 2001, 1, 500.00, 500.00, 'New York');

CREATE TABLE Sales_data (
 sale_id INT PRIMARY KEY,
    sale_date DATE, 
    customer_id INT,	
    product_id INT,
    quantity INT,	
    Unit_price DECIMAL(10,2),	
    total_amount DECIMAL(10,2),	
    Region VARCHAR(50)	
);	

INSERT INTO sales_data VALUES					
(1, '2024-01-10', 101, 2001, 2,	150, 300, 'New York'),
(2,	'2024-01-11', 102, 2002, 1, 500, 500, 'Chicago'),
(3, '2024-01-12', 103, 2001, 3, 150, 450, 'Los Angeles'),
(4, '2024-01-12', 104, 2003, 1, 1200, 1200, 'New York'),
(5, '2024-01-13', 105, 2004, 5, 75, 375, 'Chicago'),
(6, '2024-01-14', 106, 2002, 2, 500, 1000, 'Los Angeles'),
(7,	'2024-01-15', 101, 2003, 1, 1200, 1200, 'New York'),
(8, '2024-01-15', 103, 2005, 4, 250, 1000, 'Chicago');

SELECT * FROM sales_table;

SELECT * FROM sales_data;

CREATE TABLE sales_overall AS
SELECT * FROM sales_table
UNION ALL
SELECT * FROM sales_data;

SELECT * FROM sales_overall;

-- Data Exploration 

-- 1. Calculate the total revenue generated by each product and show only those that earned more than or equal to $1,200?

SELECT product_id, SUM(quantity * price_per_unit) AS total_revenue
FROM sales_overall
GROUP BY product_id
HAVING total_revenue >= 1200;

-- 2. Find the average order value (AOV) per customer?

SELECT customer_id, 
       ROUND(SUM(quantity * price_per_unit) / COUNT(DISTINCT sale_id), 2) AS avg_order_value
FROM sales_overall
GROUP BY customer_id;

-- 3. Show the top 3 highest revenue-generating customers?

SELECT customer_id, SUM(quantity * price_per_unit) AS total_spent
FROM sales_overall
GROUP BY customer_id
ORDER BY total_spent DESC
LIMIT 3;

-- 4. Find the total quantity sold for each product?

SELECT product_id, SUM(quantity) AS total_quantity_sold
FROM sales_overall
GROUP BY product_id;

-- 5. Get the top 5 best-selling products by revenue?

SELECT product_id, SUM(quantity * price_per_unit) AS total_revenue
FROM sales_overall
GROUP BY product_id
ORDER BY total_revenue DESC
LIMIT 5;

-- 6. Get the running total revenue by date (window function)?

SELECT sale_date, 
       SUM(quantity * price_per_unit) OVER (ORDER BY sale_date) AS running_total_revenue
FROM sales_overall;

-- 8. Identify the day with the highest number of sales (by quantity)?

SELECT sale_date, SUM(quantity) AS total_quantity
FROM sales_overall
GROUP BY sale_date
ORDER BY total_quantity DESC
LIMIT 1;

-- 9. For each customer, find their most recent purchase date?

SELECT customer_id, MAX(sale_date) AS last_purchase_date
FROM sales_overall
GROUP BY customer_id;

-- 10. Find products that have been sold at different prices?

SELECT product_id, COUNT(DISTINCT price_per_unit) AS price_variations
FROM sales_overall
GROUP BY product_id
HAVING price_variations > 1;

-- End of Project
